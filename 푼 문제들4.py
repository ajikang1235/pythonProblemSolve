'''
문제 설명
임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.

제한 사항
n은 1이상, 50000000000000 이하인 양의 정수입니다.

입출력     예
n	    return
121	    144
3	    -1

입출력 예 설명

입출력 예#1
121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.

입출력 예#2
3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.
'''
import math

def solution(n):
    if n % math.sqrt(n) == 0:                   # 입력값 n 이 제곱값이라면 n 의 제곱근으로 나눴을 때 나머지가 0일것이다.
        return int(math.sqrt(n)+1)**2           # n이 제곱값이라면  제곱근을 구한 후 1 을 더해 다시 제곱시켜서 반환한다.
    else:
        return -1                               # 그렇지 않으면 -1을 리턴

print(solution(144))




'''

함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다.
 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.

제한 조건
x는 -10000000 이상, 10000000 이하인 정수입니다.
n은 1000 이하인 자연수입니다.

입출력     예
x	n	answer
2	5	[2,4,6,8,10]
4	3	[4,8,12]
-4	2	[-4, -8]

'''

def solution(x, n):
    answer = []
    while n<=1000:
        for i in range(1,n+1):       # 매개변수 i 를 1부터 n+1까지의 범위로 하여금 수를 도출하고
            answer.append(i*x)       # 빈 리스트에 도출된 i와 입력값 x를 곱한 원소들을 모두 추가한다.
        return answer

print(solution(-4,2))





# 내가 푼 문제가 아니다. 아직은 변수 설정에 있어서 헷갈리는 부분이 많은 것 같다.
# 너무 어렵게 생각하고 있는 것인지 한 번 생각해봐야 함.

'''
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때,
commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.

입출력 예
array	                commands	                        return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]

입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.

'''

def solution(array, commands):
    answer = []
    for command in commands:
        i, j, k = command[0], command[1], command[2]  # 변수 지정을 해주는 것이 중요하다.
        slice = array[i-1:j]  # array 에서 슬라이스를 하고
        slice.sort()  # 정렬하고
        answer.append(slice[k-1])  # 인덱싱하자
    return answer


print(solution([1,3,5,7,8,9],[[2,4,1]]))

'''

문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.
s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.

제한 사항
str은 길이 1 이상인 문자열입니다.

입출력 예
s	    return
Zbcdefg	gfedcbZ


'''

def solution(s):
    answer=''
    if s.split():                  # split() 함수도 문자열을 리스트를 바꿀 때 사용하면 유용하다.
        s1=sorted(s,reverse=True)  # 리스트화된 문자열을 내림차순으로 정렬
        s2=''.join(s1)             # 리스트를 다시 문자열로 변환하는 함수 ''.join 을 사용해준다.
        answer+=s2                 # 결과값으로 반환
        return answer

print(solution('Zbcdefg'))


# str='abcd124'
# print(sorted(str))
# '숫자 + 문자'(문자열)을 sorted 할 시 숫자 - 문자 순으로 오름차순 정렬.
# 문자열 정렬 시 굳이 문자열.split() 함수를 해 줄 팔요가 없다.
#  내림차순으로 지정했을 때 대문자는 자동적으로 소문자의 뒤로 오게된다.  따로 설정을 해 줄 필요가 없다는 의미.



'''
문제 설명
이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.
별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요.

제한 조건
n과 m은 각각 1000 이하인 자연수입니다.
예시
입력

5 3
출력

*****
*****
*****
'''


n, m = map(int, input().strip().split(' '))
for i in range(m):                    # 이 for 문은 i 를 m 만큼 세로로 출력하게 해준다. 이렇게 하면 3줄이 나타난다.
                                      # ex) m =3  i
                                      #           i
                                      #           i
    for j in range(n):                # 이 for 문은 j 를 n 만큼 가로로 출력학 해준다. 줄안에 5개가 입력된다.
        print('*',end='')
    print()



